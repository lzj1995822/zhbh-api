<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.jtzh.mapper.UserLoginLogMapper" >
  <resultMap id="BaseResultMap" type="com.jtzh.entity.UserLoginLog" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="user_name" property="userName" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="ip" property="ip" jdbcType="VARCHAR" />
    <result column="result" property="result" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, user_name, create_time, ip, result
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    <include refid="Base_Column_List" />
    from user_login_log
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from user_login_log
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.jtzh.entity.UserLoginLog" >
    insert into user_login_log (id, user_name, create_time,
      ip, result)
    values (#{id,jdbcType=INTEGER}, #{userName,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP},
      #{ip,jdbcType=VARCHAR}, #{result,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.jtzh.entity.UserLoginLog" >
    insert into user_login_log
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="userName != null" >
        user_name,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="ip != null" >
        ip,
      </if>
      <if test="result != null" >
        result,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userName != null" >
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="ip != null" >
        #{ip,jdbcType=VARCHAR},
      </if>
      <if test="result != null" >
        #{result,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.jtzh.entity.UserLoginLog" >
    update user_login_log
    <set >
      <if test="userName != null" >
        user_name = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="ip != null" >
        ip = #{ip,jdbcType=VARCHAR},
      </if>
      <if test="result != null" >
        result = #{result,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.jtzh.entity.UserLoginLog" >
    update user_login_log
    set user_name = #{userName,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      ip = #{ip,jdbcType=VARCHAR},
      result = #{result,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectTotal" parameterType="com.jtzh.pojo.UserLoginLogPagination"
		resultType="java.lang.Integer">
		select count(1)
		from user_login_log
		<if test="page.key != null and page.key != ''">
			and user_name like concat('%', #{page.key},
			'%')
		</if>
		<if test="page.startTime != null and page.startTime != ''">
			and create_time &gt; #{page.startTime}
		</if>
		<if test="page.endTime != null and page.endTime != ''">
			and create_time &lt; #{page.endTime}
		</if>
	</select>
	<select id="selectInfo" parameterType="com.jtzh.pojo.UserLoginLogPagination"
		resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from user_login_log
		<if test="page.key != null and page.key != ''">
			and user_name like concat('%', #{page.key},
			'%')
		</if>
		<if test="page.startTime != null and page.startTime != ''">
			and create_time &gt; #{page.startTime}
		</if>
		<if test="page.endTime != null and page.endTime != ''">
			and create_time &lt; #{page.endTime}
		</if>
        order by create_time DESC
		limit
		#{page.start},#{page.pageSize}
	</select>
</mapper>
